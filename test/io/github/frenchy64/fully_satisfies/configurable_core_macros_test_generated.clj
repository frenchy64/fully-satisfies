(ns io.github.frenchy64.fully-satisfies.configurable-core-macros-test-generated (:require io.github.frenchy64.fully-satisfies.configurable-core-macros.let io.github.frenchy64.fully-satisfies.configurable-core-macros.fn io.github.frenchy64.fully-satisfies.configurable-core-macros.defn))(clojure.core/defmacro my-let "binding => binding-form init-expr\n     binding-form => name, or destructuring-form\n     destructuring-form => map-destructure-form, or seq-destructure-form\n\n     Evaluates the exprs in a lexical context in which the symbols in\n     the binding-forms are bound to their respective init-exprs or parts\n     therein.\n\n     See https://clojure.org/reference/special_forms#binding-forms for\n     more information about destructuring." {:forms (quote [(let [bindings*] exprs*)])} [bindings__5999__auto__ & body__6000__auto__] (io.github.frenchy64.fully-satisfies.configurable-core-macros.let/let-implementation bindings__5999__auto__ body__6000__auto__ (quote {:rename #:clojure.core{let my-let, fn my-fn, defn my-defn}, :opts-var io.github.frenchy64.fully-satisfies.configurable-core-macros-test/opts})))

(clojure.core/defmacro my-fn "params => positional-params*, or positional-params* & rest-param\n     positional-param => binding-form\n     rest-param => binding-form\n     binding-form => name, or destructuring-form\n\n     Defines a function.\n\n     See https://clojure.org/reference/special_forms#fn for more information" {:forms (quote [(fn name? [params*] exprs*) (fn name? ([params*] exprs*) +)])} [& sigs__6029__auto__] (io.github.frenchy64.fully-satisfies.configurable-core-macros.fn/fn-implementation &form sigs__6029__auto__ (quote {:rename #:clojure.core{let my-let, fn my-fn, defn my-defn}, :opts-var io.github.frenchy64.fully-satisfies.configurable-core-macros-test/opts})))

(def my-defn (clojure.core/fn my-defn [&form__6062__auto__ &env__6063__auto__ name__6064__auto__ & fdecl__6065__auto__] (io.github.frenchy64.fully-satisfies.configurable-core-macros.defn/defn-implementation &form__6062__auto__ &env__6063__auto__ name__6064__auto__ fdecl__6065__auto__ {:rename #:clojure.core{let my-let, fn my-fn, defn my-defn}, :opts-var io.github.frenchy64.fully-satisfies.configurable-core-macros-test/opts})))

(clojure.core/doto (var my-defn) .setMacro)